datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}


model BodyParts {
  id                Int                 @id @default(autoincrement())
  partName          String              @db.VarChar(255)
  isGeneralCategory Boolean?            @default(false)
  ExerciseBodyParts ExerciseBodyParts[]
  Workouts          Workouts[]
}

model DifficultyLevels {
  id        Int         @id @default(autoincrement())
  levelName String      @db.VarChar(255)
  Exercises Exercises[]
}

model ExerciseBodyParts {
  exerciseId Int
  bodyPartId Int
  Exercises  Exercises @relation(fields: [exerciseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercisebodyparts_ibfk_1")
  BodyParts  BodyParts @relation(fields: [bodyPartId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercisebodyparts_ibfk_2")

  @@id([exerciseId, bodyPartId])
  @@index([bodyPartId], map: "exercisebodyparts_ibfk_2")
  @@index([exerciseId])
}

model Exercises {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  description         String?               @db.Text
  difficultyLevelId    Int?
  urlVideo            String?               @db.VarChar(255)
  stickerVideo        String?               @db.VarChar(255)
  ExerciseBodyParts   ExerciseBodyParts[]
  DifficultyLevels    DifficultyLevels?     @relation(fields: [difficultyLevelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercises_ibfk_2")
  RoundExercises      RoundExercises[]
  UserWorkoutProgress UserWorkoutProgress[]

  @@index([difficultyLevelId], map: "difficultyLevelId")
}

model Metrics {
  id          Int           @id @default(autoincrement())
  metricName  String        @db.VarChar(255)
  description String?       @db.Text
  UserMetrics UserMetrics[]
}

model RoundExercises {
  id         Int       @id @default(autoincrement())
  roundId    Int
  exerciseId Int
  reps       Int
  rest       Int
  order      Int
  workoutId  Int
  Rounds     Rounds    @relation(fields: [roundId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roundexercises_ibfk_1")
  Exercises  Exercises @relation(fields: [exerciseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roundexercises_ibfk_2")
  Workouts   Workouts @relation(fields: [workoutId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roundexercises_ibfk_3")


  @@index([exerciseId], map: "exerciseId")
  @@index([roundId], map: "roundId")
  @@index([workoutId], map: "workoutId")

}

model Rounds {
  id                  Int                   @id @default(autoincrement())
  number              Int
  rest                Int
  RoundExercises      RoundExercises[]
  UserWorkoutProgress UserWorkoutProgress[]
  WorkoutRounds       WorkoutRounds[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?               @unique(map: "email")
  emailVerified       DateTime?
  image               String?
  Account             Account[]
  Session             Session[]
  UserMetrics         UserMetrics[]
  UserWorkoutSessions UserWorkoutSessions[]
}

model UserMetrics {
  id       Int      @id @default(autoincrement())
  userId   String
  metricId Int
  value    Decimal  @db.Decimal(10, 2)
  date     DateTime @db.Date
  User     User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "usermetrics_ibfk_1")
  Metrics  Metrics  @relation(fields: [metricId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "usermetrics_ibfk_2")

  @@index([metricId], map: "metricId")
  @@index([userId], map: "userId")
}

model UserWorkoutProgress {
  id                   Int                 @id @default(autoincrement())
  userWorkoutSessionId Int
  roundId              Int
  roundNumber          Int
  rest                 Int
  exerciseId           Int
  startedAt            DateTime            @db.DateTime(0)
  completedAt          DateTime?           @db.DateTime(0)
  UserWorkoutSessions  UserWorkoutSessions @relation(fields: [userWorkoutSessionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userworkoutprogress_ibfk_1")
  Rounds               Rounds              @relation(fields: [roundId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userworkoutprogress_ibfk_2")
  Exercises            Exercises           @relation(fields: [exerciseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userworkoutprogress_ibfk_3")

  @@index([exerciseId], map: "exerciseId")
  @@index([roundId], map: "roundId")
  @@index([userWorkoutSessionId], map: "userWorkoutSessionId")
}

model UserWorkoutSessions {
  id                  Int                   @id @default(autoincrement())
  userId              String
  workoutId           Int
  startDate           DateTime              @db.DateTime(0)
  endDate             DateTime?             @db.DateTime(0)
  totalSecondsSpent   Int?
  UserWorkoutProgress UserWorkoutProgress[]
  User                User                  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userworkoutsessions_ibfk_1")
  Workouts            Workouts              @relation(fields: [workoutId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userworkoutsessions_ibfk_2")

  @@index([userId], map: "userId")
  @@index([workoutId], map: "workoutId")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WorkoutRounds {
  workoutId Int
  roundId   Int
  id        Int      @id @default(autoincrement())
  Workouts  Workouts @relation(fields: [workoutId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workoutrounds_ibfk_1")
  Rounds    Rounds   @relation(fields: [roundId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workoutrounds_ibfk_2")

  @@index([roundId], map: "roundId")
  @@index([workoutId], map: "workoutId")
}

model Workouts {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  durationInMinutes   Int
  description         String?               @db.Text
  bodyPartId          Int?
  type                Workouts_type         @default(simple)
  date                DateTime?             @db.Date
  calories            Int?
  UserWorkoutSessions UserWorkoutSessions[]
  WorkoutRounds       WorkoutRounds[]
  RoundExercises      RoundExercises[]
  BodyParts           BodyParts?            @relation(fields: [bodyPartId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workouts_ibfk_1")

  @@index([bodyPartId], map: "bodyPartId")
}

enum Workouts_type {
  simple
  complexe
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "account_ibfk_1")

  @@unique([provider, providerAccountId])
  @@index([userId], map: "userId")
}

model BodyParts {
  id                Int                 @id @default(autoincrement())
  partName          String              @db.VarChar(255)
  isGeneralCategory Boolean?            @default(false)
  ExerciseBodyParts ExerciseBodyParts[]
  Workouts          Workouts[]
}

model DifficultyLevels {
  id        Int         @id @default(autoincrement())
  levelName String      @db.VarChar(255)
  Exercises Exercises[]
}

model ExerciseBodyParts {
  exerciseId Int
  bodyPartId Int
  Exercises  Exercises @relation(fields: [exerciseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercisebodyparts_ibfk_1")
  BodyParts  BodyParts @relation(fields: [bodyPartId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercisebodyparts_ibfk_2")

  @@id([exerciseId, bodyPartId])
  @@index([bodyPartId], map: "exercisebodyparts_ibfk_2")
}

model Exercises {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  description       String?             @db.Text
  difficultyLevelId Int?
  urlVideo          String?             @db.VarChar(255)
  ExerciseBodyParts ExerciseBodyParts[]
  DifficultyLevels  DifficultyLevels?   @relation(fields: [difficultyLevelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercises_ibfk_2")
  RoundExercises    RoundExercises[]

  @@index([difficultyLevelId], map: "difficultyLevelId")
}

model Metrics {
  id          Int           @id @default(autoincrement())
  metricName  String        @db.VarChar(255)
  description String?       @db.Text
  UserMetrics UserMetrics[]
}

model RoundExercises {
  id         Int       @id @default(autoincrement())
  roundId    Int
  exerciseId Int
  reps       Int
  rest       Int
  order      Int
  Rounds     Rounds    @relation(fields: [roundId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roundexercises_ibfk_1")
  Exercises  Exercises @relation(fields: [exerciseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roundexercises_ibfk_2")

  @@index([exerciseId], map: "exerciseId")
  @@index([roundId], map: "roundId")
}

model Rounds {
  id             Int              @id @default(autoincrement())
  number         Int
  rest           Int
  RoundExercises RoundExercises[]
  WorkoutRounds  WorkoutRounds[]  @ignore
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model Subscriptions {
  id        String
  workoutId Int
  User      User     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscriptions_ibfk_1")
  Workouts  Workouts @relation(fields: [workoutId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscriptions_ibfk_2")

  @@id([id, workoutId])
  @@index([workoutId], map: "workoutId")
}

model User {
  id            String          @id
  name          String?
  email         String?         @unique(map: "email")
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Session       Session[]
  Subscriptions Subscriptions[]
  UserMetrics   UserMetrics[]
}

model UserMetrics {
  id       Int      @id @default(autoincrement())
  userId   String
  metricId Int
  value    Decimal  @db.Decimal(10, 2)
  date     DateTime @db.Date
  User     User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "usermetrics_ibfk_1")
  Metrics  Metrics  @relation(fields: [metricId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "usermetrics_ibfk_2")

  @@index([metricId], map: "metricId")
  @@index([userId], map: "userId")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model WorkoutRounds {
  workoutId Int
  roundId   Int
  Workouts  Workouts @relation(fields: [workoutId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workoutrounds_ibfk_1")
  Rounds    Rounds   @relation(fields: [roundId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workoutrounds_ibfk_2")

  @@index([roundId], map: "roundId")
  @@index([workoutId], map: "workoutId")
  @@ignore
}

model Workouts {
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(255)
  durationInMinutes Int
  description       String?         @db.Text
  bodyPartId        Int?
  type              Workouts_type   @default(simple)
  date              DateTime?       @db.Date
  Subscriptions     Subscriptions[]
  WorkoutRounds     WorkoutRounds[] @ignore
  BodyParts         BodyParts?      @relation(fields: [bodyPartId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workouts_ibfk_1")

  @@index([bodyPartId], map: "bodyPartId")
}

enum Workouts_type {
  simple
  complexe
}
